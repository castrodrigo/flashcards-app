// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render NewDeckScreen should render successfully 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NewDeckScreen
    onSubmit={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef>
          Creating a new Deck
        </ForwardRef>,
        <ForwardRef>
          You can create a Deck to group a collection of topics that you would like to revisit. It is possible to trigger a Quiz through all the inserted questions.
        </ForwardRef>,
        <ForwardRef>
          <ForwardRef
            maxLength={30}
            onBlur={[Function]}
            onChangeText={[Function]}
            placeholder="Name"
            value=""
          />
          <ForwardRef
            maxLength={60}
            onBlur={[Function]}
            onChangeText={[Function]}
            placeholder="Description"
            value=""
          />
          <ForwardRef
            onPress={[Function]}
          >
            <ForwardRef>
              Create New Deck
            </ForwardRef>
          </ForwardRef>
        </ForwardRef>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Creating a new Deck",
        },
        "ref": null,
        "rendered": "Creating a new Deck",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "displayName": "Styled(Component)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
  font-size: 24px;
  font-weight: bold;
  color: #1baff6;
",
            ],
          },
          "propTypes": Object {
            "accessible": [Function],
            "adjustsFontSizeToFit": [Function],
            "allowFontScaling": [Function],
            "disabled": [Function],
            "ellipsizeMode": [Function],
            "minimumFontScale": [Function],
            "nativeID": [Function],
            "numberOfLines": [Function],
            "onLayout": [Function],
            "onLongPress": [Function],
            "onPress": [Function],
            "pressRetentionOffset": [Function],
            "selectable": [Function],
            "selectionColor": [Function],
            "style": [Function],
            "suppressHighlighting": [Function],
            "testID": [Function],
            "textBreakStrategy": [Function],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "You can create a Deck to group a collection of topics that you would like to revisit. It is possible to trigger a Quiz through all the inserted questions.",
        },
        "ref": null,
        "rendered": "You can create a Deck to group a collection of topics that you would like to revisit. It is possible to trigger a Quiz through all the inserted questions.",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "displayName": "Styled(Component)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
  font-size: 14px;
  color: #3c3c3c;
  margin: 10px 0;
  padding: 10px 0;
",
            ],
          },
          "propTypes": Object {
            "accessible": [Function],
            "adjustsFontSizeToFit": [Function],
            "allowFontScaling": [Function],
            "disabled": [Function],
            "ellipsizeMode": [Function],
            "minimumFontScale": [Function],
            "nativeID": [Function],
            "numberOfLines": [Function],
            "onLayout": [Function],
            "onLongPress": [Function],
            "onPress": [Function],
            "pressRetentionOffset": [Function],
            "selectable": [Function],
            "selectionColor": [Function],
            "style": [Function],
            "suppressHighlighting": [Function],
            "testID": [Function],
            "textBreakStrategy": [Function],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef
              maxLength={30}
              onBlur={[Function]}
              onChangeText={[Function]}
              placeholder="Name"
              value=""
            />,
            <ForwardRef
              maxLength={60}
              onBlur={[Function]}
              onChangeText={[Function]}
              placeholder="Description"
              value=""
            />,
            false,
            <ForwardRef
              onPress={[Function]}
            >
              <ForwardRef>
                Create New Deck
              </ForwardRef>
            </ForwardRef>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "maxLength": 30,
              "onBlur": [Function],
              "onChangeText": [Function],
              "placeholder": "Name",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "State": Object {
                "blurTextInput": [Function],
                "currentlyFocusedField": [Function],
                "focusTextInput": [Function],
              },
              "attrs": Array [],
              "displayName": "Styled(TextInput)",
              "getDefaultProps": [Function],
              "inlineStyle": InlineStyle {
                "rules": Array [
                  "
  border-color: #cccccc;
  border-bottom-width: 1;
  height: 50;
  font-size: 20;
  padding-left: 2px;
  padding-right: 2px;
",
                ],
              },
              "render": [Function],
              "styledComponentId": "StyledNativeComponent",
              "target": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "maxLength": 60,
              "onBlur": [Function],
              "onChangeText": [Function],
              "placeholder": "Description",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "State": Object {
                "blurTextInput": [Function],
                "currentlyFocusedField": [Function],
                "focusTextInput": [Function],
              },
              "attrs": Array [],
              "displayName": "Styled(TextInput)",
              "getDefaultProps": [Function],
              "inlineStyle": InlineStyle {
                "rules": Array [
                  "
  border-color: #cccccc;
  border-bottom-width: 1;
  height: 50;
  font-size: 20;
  padding-left: 2px;
  padding-right: 2px;
",
                ],
              },
              "render": [Function],
              "styledComponentId": "StyledNativeComponent",
              "target": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <ForwardRef>
                Create New Deck
              </ForwardRef>,
              "onPress": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Create New Deck",
              },
              "ref": null,
              "rendered": "Create New Deck",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "displayName": "Styled(Component)",
                "inlineStyle": InlineStyle {
                  "rules": Array [
                    "
  font-size: 16px;
  font-weight: bold;
  text-align: center;
  text-transform: uppercase;
  color: #fff;
  padding: 0 10px;
  align-self: center;
",
                  ],
                },
                "propTypes": Object {
                  "accessible": [Function],
                  "adjustsFontSizeToFit": [Function],
                  "allowFontScaling": [Function],
                  "disabled": [Function],
                  "ellipsizeMode": [Function],
                  "minimumFontScale": [Function],
                  "nativeID": [Function],
                  "numberOfLines": [Function],
                  "onLayout": [Function],
                  "onLongPress": [Function],
                  "onPress": [Function],
                  "pressRetentionOffset": [Function],
                  "selectable": [Function],
                  "selectionColor": [Function],
                  "style": [Function],
                  "suppressHighlighting": [Function],
                  "testID": [Function],
                  "textBreakStrategy": [Function],
                },
                "render": [Function],
                "styledComponentId": "StyledNativeComponent",
                "target": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "displayName": "Styled(Styled(TouchableOpacity))",
              "getDefaultProps": [Function],
              "inlineStyle": InlineStyle {
                "rules": Array [
                  "
  padding: 10px;
  margin-top: 32px;
  border-radius: 12px;
  border-bottom-width: 3px;
  flex: 1;
  flex-direction: row;
  justify-content: center;
",
                  "
  background: #a560e7;
  border-bottom-color: #b881ec;
",
                ],
              },
              "render": [Function],
              "styledComponentId": "StyledNativeComponent",
              "target": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "displayName": "Styled(Component)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
  margin-top: 10px;
  padding: 20px;
  border-width: 1px;
  border-color: #ccc;
  border-radius: 12px;
",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
      },
    ],
    "type": [MockFunction],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef>
            Creating a new Deck
          </ForwardRef>,
          <ForwardRef>
            You can create a Deck to group a collection of topics that you would like to revisit. It is possible to trigger a Quiz through all the inserted questions.
          </ForwardRef>,
          <ForwardRef>
            <ForwardRef
              maxLength={30}
              onBlur={[Function]}
              onChangeText={[Function]}
              placeholder="Name"
              value=""
            />
            <ForwardRef
              maxLength={60}
              onBlur={[Function]}
              onChangeText={[Function]}
              placeholder="Description"
              value=""
            />
            <ForwardRef
              onPress={[Function]}
            >
              <ForwardRef>
                Create New Deck
              </ForwardRef>
            </ForwardRef>
          </ForwardRef>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Creating a new Deck",
          },
          "ref": null,
          "rendered": "Creating a new Deck",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "displayName": "Styled(Component)",
            "inlineStyle": InlineStyle {
              "rules": Array [
                "
  font-size: 24px;
  font-weight: bold;
  color: #1baff6;
",
              ],
            },
            "propTypes": Object {
              "accessible": [Function],
              "adjustsFontSizeToFit": [Function],
              "allowFontScaling": [Function],
              "disabled": [Function],
              "ellipsizeMode": [Function],
              "minimumFontScale": [Function],
              "nativeID": [Function],
              "numberOfLines": [Function],
              "onLayout": [Function],
              "onLongPress": [Function],
              "onPress": [Function],
              "pressRetentionOffset": [Function],
              "selectable": [Function],
              "selectionColor": [Function],
              "style": [Function],
              "suppressHighlighting": [Function],
              "testID": [Function],
              "textBreakStrategy": [Function],
            },
            "render": [Function],
            "styledComponentId": "StyledNativeComponent",
            "target": [Function],
            "withComponent": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "You can create a Deck to group a collection of topics that you would like to revisit. It is possible to trigger a Quiz through all the inserted questions.",
          },
          "ref": null,
          "rendered": "You can create a Deck to group a collection of topics that you would like to revisit. It is possible to trigger a Quiz through all the inserted questions.",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "displayName": "Styled(Component)",
            "inlineStyle": InlineStyle {
              "rules": Array [
                "
  font-size: 14px;
  color: #3c3c3c;
  margin: 10px 0;
  padding: 10px 0;
",
              ],
            },
            "propTypes": Object {
              "accessible": [Function],
              "adjustsFontSizeToFit": [Function],
              "allowFontScaling": [Function],
              "disabled": [Function],
              "ellipsizeMode": [Function],
              "minimumFontScale": [Function],
              "nativeID": [Function],
              "numberOfLines": [Function],
              "onLayout": [Function],
              "onLongPress": [Function],
              "onPress": [Function],
              "pressRetentionOffset": [Function],
              "selectable": [Function],
              "selectionColor": [Function],
              "style": [Function],
              "suppressHighlighting": [Function],
              "testID": [Function],
              "textBreakStrategy": [Function],
            },
            "render": [Function],
            "styledComponentId": "StyledNativeComponent",
            "target": [Function],
            "withComponent": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef
                maxLength={30}
                onBlur={[Function]}
                onChangeText={[Function]}
                placeholder="Name"
                value=""
              />,
              <ForwardRef
                maxLength={60}
                onBlur={[Function]}
                onChangeText={[Function]}
                placeholder="Description"
                value=""
              />,
              false,
              <ForwardRef
                onPress={[Function]}
              >
                <ForwardRef>
                  Create New Deck
                </ForwardRef>
              </ForwardRef>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "maxLength": 30,
                "onBlur": [Function],
                "onChangeText": [Function],
                "placeholder": "Name",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "State": Object {
                  "blurTextInput": [Function],
                  "currentlyFocusedField": [Function],
                  "focusTextInput": [Function],
                },
                "attrs": Array [],
                "displayName": "Styled(TextInput)",
                "getDefaultProps": [Function],
                "inlineStyle": InlineStyle {
                  "rules": Array [
                    "
  border-color: #cccccc;
  border-bottom-width: 1;
  height: 50;
  font-size: 20;
  padding-left: 2px;
  padding-right: 2px;
",
                  ],
                },
                "render": [Function],
                "styledComponentId": "StyledNativeComponent",
                "target": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "maxLength": 60,
                "onBlur": [Function],
                "onChangeText": [Function],
                "placeholder": "Description",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "State": Object {
                  "blurTextInput": [Function],
                  "currentlyFocusedField": [Function],
                  "focusTextInput": [Function],
                },
                "attrs": Array [],
                "displayName": "Styled(TextInput)",
                "getDefaultProps": [Function],
                "inlineStyle": InlineStyle {
                  "rules": Array [
                    "
  border-color: #cccccc;
  border-bottom-width: 1;
  height: 50;
  font-size: 20;
  padding-left: 2px;
  padding-right: 2px;
",
                  ],
                },
                "render": [Function],
                "styledComponentId": "StyledNativeComponent",
                "target": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <ForwardRef>
                  Create New Deck
                </ForwardRef>,
                "onPress": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "Create New Deck",
                },
                "ref": null,
                "rendered": "Create New Deck",
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "displayName": "Styled(Component)",
                  "inlineStyle": InlineStyle {
                    "rules": Array [
                      "
  font-size: 16px;
  font-weight: bold;
  text-align: center;
  text-transform: uppercase;
  color: #fff;
  padding: 0 10px;
  align-self: center;
",
                    ],
                  },
                  "propTypes": Object {
                    "accessible": [Function],
                    "adjustsFontSizeToFit": [Function],
                    "allowFontScaling": [Function],
                    "disabled": [Function],
                    "ellipsizeMode": [Function],
                    "minimumFontScale": [Function],
                    "nativeID": [Function],
                    "numberOfLines": [Function],
                    "onLayout": [Function],
                    "onLongPress": [Function],
                    "onPress": [Function],
                    "pressRetentionOffset": [Function],
                    "selectable": [Function],
                    "selectionColor": [Function],
                    "style": [Function],
                    "suppressHighlighting": [Function],
                    "testID": [Function],
                    "textBreakStrategy": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "StyledNativeComponent",
                  "target": [Function],
                  "withComponent": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "displayName": "Styled(Styled(TouchableOpacity))",
                "getDefaultProps": [Function],
                "inlineStyle": InlineStyle {
                  "rules": Array [
                    "
  padding: 10px;
  margin-top: 32px;
  border-radius: 12px;
  border-bottom-width: 3px;
  flex: 1;
  flex-direction: row;
  justify-content: center;
",
                    "
  background: #a560e7;
  border-bottom-color: #b881ec;
",
                  ],
                },
                "render": [Function],
                "styledComponentId": "StyledNativeComponent",
                "target": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "displayName": "Styled(Component)",
            "inlineStyle": InlineStyle {
              "rules": Array [
                "
  margin-top: 10px;
  padding: 20px;
  border-width: 1px;
  border-color: #ccc;
  border-radius: 12px;
",
              ],
            },
            "render": [Function],
            "styledComponentId": "StyledNativeComponent",
            "target": [Function],
            "withComponent": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
        },
      ],
      "type": [MockFunction],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": false,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
